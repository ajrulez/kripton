package com.abubusoft.kripton.retrofit3.model;

import java.util.ArrayList;

import com.abubusoft.kripton.AbstractMapper;
import com.abubusoft.kripton.BinderUtils;
import com.abubusoft.kripton.annotation.BindMap;
import com.abubusoft.kripton.common.StringUtils;
import com.abubusoft.kripton.escape.StringEscapeUtils;
import com.abubusoft.kripton.xml.XMLParser;
import com.abubusoft.kripton.xml.XMLSerializer;
import com.abubusoft.kripton.xml.XmlAttributeUtils;
import com.abubusoft.kripton.xml.XmlPullParser;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;

/**
 * This class is binder map for FilmDetail
 *
 * <p>
 * <strong>This class is generated by Kripton Annotation Processor - v.
 * 4.0.0-rc.19</strong>
 * </p>
 * <p>
 * <strong>Generation-time: Thu May 31 23:09:06 CEST 2018</strong>
 * </p>
 *
 * @see FilmDetail
 */
@BindMap(FilmDetail.class)
public class FilmDetailBindMap extends AbstractMapper<FilmDetail> {
	/**
	 * RatingBindMap
	 */
	private RatingBindMap ratingBindMap = BinderUtils.mapperFor(Rating.class);

	@Override
	public int serializeOnJackson(FilmDetail object, JsonGenerator jacksonSerializer) throws Exception {
		jacksonSerializer.writeStartObject();
		int fieldCount = 0;

		// Serialized Field:

		// field Actors (mapped with "actors")
		if (object.getActors() != null) {
			fieldCount++;
			jacksonSerializer.writeStringField("actors", object.getActors());
		}

		// field Awards (mapped with "awards")
		if (object.getAwards() != null) {
			fieldCount++;
			jacksonSerializer.writeStringField("awards", object.getAwards());
		}

		// field BoxOffice (mapped with "boxOffice")
		if (object.getBoxOffice() != null) {
			fieldCount++;
			jacksonSerializer.writeStringField("boxOffice", object.getBoxOffice());
		}

		// field Country (mapped with "country")
		if (object.getCountry() != null) {
			fieldCount++;
			jacksonSerializer.writeStringField("country", object.getCountry());
		}

		// field DVD (mapped with "dVD")
		if (object.getDVD() != null) {
			fieldCount++;
			jacksonSerializer.writeStringField("dVD", object.getDVD());
		}

		// field Director (mapped with "director")
		if (object.getDirector() != null) {
			fieldCount++;
			jacksonSerializer.writeStringField("director", object.getDirector());
		}

		// field Genre (mapped with "genre")
		if (object.getGenre() != null) {
			fieldCount++;
			jacksonSerializer.writeStringField("genre", object.getGenre());
		}

		// field Language (mapped with "language")
		if (object.getLanguage() != null) {
			fieldCount++;
			jacksonSerializer.writeStringField("language", object.getLanguage());
		}

		// field Metascore (mapped with "metascore")
		if (object.getMetascore() != null) {
			fieldCount++;
			jacksonSerializer.writeStringField("metascore", object.getMetascore());
		}

		// field Plot (mapped with "plot")
		if (object.getPlot() != null) {
			fieldCount++;
			jacksonSerializer.writeStringField("plot", object.getPlot());
		}

		// field Poster (mapped with "poster")
		if (object.getPoster() != null) {
			fieldCount++;
			jacksonSerializer.writeStringField("poster", object.getPoster());
		}

		// field Production (mapped with "production")
		if (object.getProduction() != null) {
			fieldCount++;
			jacksonSerializer.writeStringField("production", object.getProduction());
		}

		// field Rated (mapped with "rated")
		if (object.getRated() != null) {
			fieldCount++;
			jacksonSerializer.writeStringField("rated", object.getRated());
		}

		// field Ratings (mapped with "ratings")
		if (object.getRatings() != null) {
			fieldCount++;
			int n = object.getRatings().size();
			Rating item;
			// write wrapper tag
			jacksonSerializer.writeFieldName("ratings");
			jacksonSerializer.writeStartArray();
			for (int i = 0; i < n; i++) {
				item = object.getRatings().get(i);
				if (item == null) {
					jacksonSerializer.writeNull();
				} else {
					ratingBindMap.serializeOnJackson(item, jacksonSerializer);
				}
			}
			jacksonSerializer.writeEndArray();
		}

		// field Released (mapped with "released")
		if (object.getReleased() != null) {
			fieldCount++;
			jacksonSerializer.writeStringField("released", object.getReleased());
		}

		// field Response (mapped with "response")
		if (object.getResponse() != null) {
			fieldCount++;
			jacksonSerializer.writeStringField("response", object.getResponse());
		}

		// field Runtime (mapped with "runtime")
		if (object.getRuntime() != null) {
			fieldCount++;
			jacksonSerializer.writeStringField("runtime", object.getRuntime());
		}

		// field Title (mapped with "title")
		if (object.getTitle() != null) {
			fieldCount++;
			jacksonSerializer.writeStringField("title", object.getTitle());
		}

		// field Type (mapped with "type")
		if (object.getType() != null) {
			fieldCount++;
			jacksonSerializer.writeStringField("type", object.getType());
		}

		// field Website (mapped with "website")
		if (object.getWebsite() != null) {
			fieldCount++;
			jacksonSerializer.writeStringField("website", object.getWebsite());
		}

		// field Writer (mapped with "writer")
		if (object.getWriter() != null) {
			fieldCount++;
			jacksonSerializer.writeStringField("writer", object.getWriter());
		}

		// field Year (mapped with "year")
		if (object.getYear() != null) {
			fieldCount++;
			jacksonSerializer.writeStringField("year", object.getYear());
		}

		// field imdbID (mapped with "imdbID")
		if (object.getImdbID() != null) {
			fieldCount++;
			jacksonSerializer.writeStringField("imdbID", object.getImdbID());
		}

		// field imdbRating (mapped with "imdbRating")
		if (object.getImdbRating() != null) {
			fieldCount++;
			jacksonSerializer.writeStringField("imdbRating", object.getImdbRating());
		}

		// field imdbVotes (mapped with "imdbVotes")
		if (object.getImdbVotes() != null) {
			fieldCount++;
			jacksonSerializer.writeStringField("imdbVotes", object.getImdbVotes());
		}

		jacksonSerializer.writeEndObject();
		return fieldCount;
	}

	@Override
	public int serializeOnJacksonAsString(FilmDetail object, JsonGenerator jacksonSerializer) throws Exception {
		jacksonSerializer.writeStartObject();
		int fieldCount = 0;

		// Serialized Field:

		// field Actors (mapped with "actors")
		if (object.getActors() != null) {
			fieldCount++;
			jacksonSerializer.writeStringField("actors", object.getActors());
		}

		// field Awards (mapped with "awards")
		if (object.getAwards() != null) {
			fieldCount++;
			jacksonSerializer.writeStringField("awards", object.getAwards());
		}

		// field BoxOffice (mapped with "boxOffice")
		if (object.getBoxOffice() != null) {
			fieldCount++;
			jacksonSerializer.writeStringField("boxOffice", object.getBoxOffice());
		}

		// field Country (mapped with "country")
		if (object.getCountry() != null) {
			fieldCount++;
			jacksonSerializer.writeStringField("country", object.getCountry());
		}

		// field DVD (mapped with "dVD")
		if (object.getDVD() != null) {
			fieldCount++;
			jacksonSerializer.writeStringField("dVD", object.getDVD());
		}

		// field Director (mapped with "director")
		if (object.getDirector() != null) {
			fieldCount++;
			jacksonSerializer.writeStringField("director", object.getDirector());
		}

		// field Genre (mapped with "genre")
		if (object.getGenre() != null) {
			fieldCount++;
			jacksonSerializer.writeStringField("genre", object.getGenre());
		}

		// field Language (mapped with "language")
		if (object.getLanguage() != null) {
			fieldCount++;
			jacksonSerializer.writeStringField("language", object.getLanguage());
		}

		// field Metascore (mapped with "metascore")
		if (object.getMetascore() != null) {
			fieldCount++;
			jacksonSerializer.writeStringField("metascore", object.getMetascore());
		}

		// field Plot (mapped with "plot")
		if (object.getPlot() != null) {
			fieldCount++;
			jacksonSerializer.writeStringField("plot", object.getPlot());
		}

		// field Poster (mapped with "poster")
		if (object.getPoster() != null) {
			fieldCount++;
			jacksonSerializer.writeStringField("poster", object.getPoster());
		}

		// field Production (mapped with "production")
		if (object.getProduction() != null) {
			fieldCount++;
			jacksonSerializer.writeStringField("production", object.getProduction());
		}

		// field Rated (mapped with "rated")
		if (object.getRated() != null) {
			fieldCount++;
			jacksonSerializer.writeStringField("rated", object.getRated());
		}

		// field Ratings (mapped with "ratings")
		if (object.getRatings() != null) {
			fieldCount++;
			int n = object.getRatings().size();
			Rating item;
			// write wrapper tag
			jacksonSerializer.writeFieldName("ratings");
			if (n > 0) {
				jacksonSerializer.writeStartArray();
				for (int i = 0; i < n; i++) {
					item = object.getRatings().get(i);
					if (item == null) {
						jacksonSerializer.writeString("null");
					} else {
						if (ratingBindMap.serializeOnJacksonAsString(item, jacksonSerializer) == 0) {
							jacksonSerializer.writeNullField("ratings");
						}
					}
				}
				jacksonSerializer.writeEndArray();
			} else {
				jacksonSerializer.writeString("");
			}
		}

		// field Released (mapped with "released")
		if (object.getReleased() != null) {
			fieldCount++;
			jacksonSerializer.writeStringField("released", object.getReleased());
		}

		// field Response (mapped with "response")
		if (object.getResponse() != null) {
			fieldCount++;
			jacksonSerializer.writeStringField("response", object.getResponse());
		}

		// field Runtime (mapped with "runtime")
		if (object.getRuntime() != null) {
			fieldCount++;
			jacksonSerializer.writeStringField("runtime", object.getRuntime());
		}

		// field Title (mapped with "title")
		if (object.getTitle() != null) {
			fieldCount++;
			jacksonSerializer.writeStringField("title", object.getTitle());
		}

		// field Type (mapped with "type")
		if (object.getType() != null) {
			fieldCount++;
			jacksonSerializer.writeStringField("type", object.getType());
		}

		// field Website (mapped with "website")
		if (object.getWebsite() != null) {
			fieldCount++;
			jacksonSerializer.writeStringField("website", object.getWebsite());
		}

		// field Writer (mapped with "writer")
		if (object.getWriter() != null) {
			fieldCount++;
			jacksonSerializer.writeStringField("writer", object.getWriter());
		}

		// field Year (mapped with "year")
		if (object.getYear() != null) {
			fieldCount++;
			jacksonSerializer.writeStringField("year", object.getYear());
		}

		// field imdbID (mapped with "imdbID")
		if (object.getImdbID() != null) {
			fieldCount++;
			jacksonSerializer.writeStringField("imdbID", object.getImdbID());
		}

		// field imdbRating (mapped with "imdbRating")
		if (object.getImdbRating() != null) {
			fieldCount++;
			jacksonSerializer.writeStringField("imdbRating", object.getImdbRating());
		}

		// field imdbVotes (mapped with "imdbVotes")
		if (object.getImdbVotes() != null) {
			fieldCount++;
			jacksonSerializer.writeStringField("imdbVotes", object.getImdbVotes());
		}

		jacksonSerializer.writeEndObject();
		return fieldCount;
	}

	/**
	 * method for xml serialization
	 */
	@Override
	public void serializeOnXml(FilmDetail object, XMLSerializer xmlSerializer, int currentEventType) throws Exception {
		if (currentEventType == 0) {
			xmlSerializer.writeStartElement("filmDetail");
		}

		// Persisted fields:

		// field Actors (mapped with "actors")
		if (object.getActors() != null) {
			xmlSerializer.writeStartElement("actors");
			xmlSerializer.writeCharacters(StringEscapeUtils.escapeXml10(object.getActors()));
			xmlSerializer.writeEndElement();
		}

		// field Awards (mapped with "awards")
		if (object.getAwards() != null) {
			xmlSerializer.writeStartElement("awards");
			xmlSerializer.writeCharacters(StringEscapeUtils.escapeXml10(object.getAwards()));
			xmlSerializer.writeEndElement();
		}

		// field BoxOffice (mapped with "boxOffice")
		if (object.getBoxOffice() != null) {
			xmlSerializer.writeStartElement("boxOffice");
			xmlSerializer.writeCharacters(StringEscapeUtils.escapeXml10(object.getBoxOffice()));
			xmlSerializer.writeEndElement();
		}

		// field Country (mapped with "country")
		if (object.getCountry() != null) {
			xmlSerializer.writeStartElement("country");
			xmlSerializer.writeCharacters(StringEscapeUtils.escapeXml10(object.getCountry()));
			xmlSerializer.writeEndElement();
		}

		// field DVD (mapped with "dVD")
		if (object.getDVD() != null) {
			xmlSerializer.writeStartElement("dVD");
			xmlSerializer.writeCharacters(StringEscapeUtils.escapeXml10(object.getDVD()));
			xmlSerializer.writeEndElement();
		}

		// field Director (mapped with "director")
		if (object.getDirector() != null) {
			xmlSerializer.writeStartElement("director");
			xmlSerializer.writeCharacters(StringEscapeUtils.escapeXml10(object.getDirector()));
			xmlSerializer.writeEndElement();
		}

		// field Genre (mapped with "genre")
		if (object.getGenre() != null) {
			xmlSerializer.writeStartElement("genre");
			xmlSerializer.writeCharacters(StringEscapeUtils.escapeXml10(object.getGenre()));
			xmlSerializer.writeEndElement();
		}

		// field imdbID (mapped with "imdbID")
		if (object.getImdbID() != null) {
			xmlSerializer.writeStartElement("imdbID");
			xmlSerializer.writeCharacters(StringEscapeUtils.escapeXml10(object.getImdbID()));
			xmlSerializer.writeEndElement();
		}

		// field imdbRating (mapped with "imdbRating")
		if (object.getImdbRating() != null) {
			xmlSerializer.writeStartElement("imdbRating");
			xmlSerializer.writeCharacters(StringEscapeUtils.escapeXml10(object.getImdbRating()));
			xmlSerializer.writeEndElement();
		}

		// field imdbVotes (mapped with "imdbVotes")
		if (object.getImdbVotes() != null) {
			xmlSerializer.writeStartElement("imdbVotes");
			xmlSerializer.writeCharacters(StringEscapeUtils.escapeXml10(object.getImdbVotes()));
			xmlSerializer.writeEndElement();
		}

		// field Language (mapped with "language")
		if (object.getLanguage() != null) {
			xmlSerializer.writeStartElement("language");
			xmlSerializer.writeCharacters(StringEscapeUtils.escapeXml10(object.getLanguage()));
			xmlSerializer.writeEndElement();
		}

		// field Metascore (mapped with "metascore")
		if (object.getMetascore() != null) {
			xmlSerializer.writeStartElement("metascore");
			xmlSerializer.writeCharacters(StringEscapeUtils.escapeXml10(object.getMetascore()));
			xmlSerializer.writeEndElement();
		}

		// field Plot (mapped with "plot")
		if (object.getPlot() != null) {
			xmlSerializer.writeStartElement("plot");
			xmlSerializer.writeCharacters(StringEscapeUtils.escapeXml10(object.getPlot()));
			xmlSerializer.writeEndElement();
		}

		// field Poster (mapped with "poster")
		if (object.getPoster() != null) {
			xmlSerializer.writeStartElement("poster");
			xmlSerializer.writeCharacters(StringEscapeUtils.escapeXml10(object.getPoster()));
			xmlSerializer.writeEndElement();
		}

		// field Production (mapped with "production")
		if (object.getProduction() != null) {
			xmlSerializer.writeStartElement("production");
			xmlSerializer.writeCharacters(StringEscapeUtils.escapeXml10(object.getProduction()));
			xmlSerializer.writeEndElement();
		}

		// field Rated (mapped with "rated")
		if (object.getRated() != null) {
			xmlSerializer.writeStartElement("rated");
			xmlSerializer.writeCharacters(StringEscapeUtils.escapeXml10(object.getRated()));
			xmlSerializer.writeEndElement();
		}

		// field Ratings (mapped with "ratings")
		if (object.getRatings() != null) {
			int n = object.getRatings().size();
			Rating item;
			for (int i = 0; i < n; i++) {
				item = object.getRatings().get(i);
				if (item == null) {
					xmlSerializer.writeEmptyElement("ratings");
				} else {
					xmlSerializer.writeStartElement("ratings");
					ratingBindMap.serializeOnXml(item, xmlSerializer, 2);
					xmlSerializer.writeEndElement();
				}
			}
			// to distinguish between first empty element and empty collection,
			// we write an attribute emptyCollection
			if (n == 0) {
				xmlSerializer.writeStartElement("ratings");
				xmlSerializer.writeAttribute("emptyCollection", "true");
				xmlSerializer.writeEndElement();
			}
		}

		// field Released (mapped with "released")
		if (object.getReleased() != null) {
			xmlSerializer.writeStartElement("released");
			xmlSerializer.writeCharacters(StringEscapeUtils.escapeXml10(object.getReleased()));
			xmlSerializer.writeEndElement();
		}

		// field Response (mapped with "response")
		if (object.getResponse() != null) {
			xmlSerializer.writeStartElement("response");
			xmlSerializer.writeCharacters(StringEscapeUtils.escapeXml10(object.getResponse()));
			xmlSerializer.writeEndElement();
		}

		// field Runtime (mapped with "runtime")
		if (object.getRuntime() != null) {
			xmlSerializer.writeStartElement("runtime");
			xmlSerializer.writeCharacters(StringEscapeUtils.escapeXml10(object.getRuntime()));
			xmlSerializer.writeEndElement();
		}

		// field Title (mapped with "title")
		if (object.getTitle() != null) {
			xmlSerializer.writeStartElement("title");
			xmlSerializer.writeCharacters(StringEscapeUtils.escapeXml10(object.getTitle()));
			xmlSerializer.writeEndElement();
		}

		// field Type (mapped with "type")
		if (object.getType() != null) {
			xmlSerializer.writeStartElement("type");
			xmlSerializer.writeCharacters(StringEscapeUtils.escapeXml10(object.getType()));
			xmlSerializer.writeEndElement();
		}

		// field Website (mapped with "website")
		if (object.getWebsite() != null) {
			xmlSerializer.writeStartElement("website");
			xmlSerializer.writeCharacters(StringEscapeUtils.escapeXml10(object.getWebsite()));
			xmlSerializer.writeEndElement();
		}

		// field Writer (mapped with "writer")
		if (object.getWriter() != null) {
			xmlSerializer.writeStartElement("writer");
			xmlSerializer.writeCharacters(StringEscapeUtils.escapeXml10(object.getWriter()));
			xmlSerializer.writeEndElement();
		}

		// field Year (mapped with "year")
		if (object.getYear() != null) {
			xmlSerializer.writeStartElement("year");
			xmlSerializer.writeCharacters(StringEscapeUtils.escapeXml10(object.getYear()));
			xmlSerializer.writeEndElement();
		}

		if (currentEventType == 0) {
			xmlSerializer.writeEndElement();
		}
	}

	/**
	 * parse with jackson
	 */
	@Override
	public FilmDetail parseOnJackson(JsonParser jacksonParser) throws Exception {
		FilmDetail instance = new FilmDetail();
		String fieldName;
		if (jacksonParser.currentToken() == null) {
			jacksonParser.nextToken();
		}
		if (jacksonParser.currentToken() != JsonToken.START_OBJECT) {
			jacksonParser.skipChildren();
			return instance;
		}
		while (jacksonParser.nextToken() != JsonToken.END_OBJECT) {
			fieldName = jacksonParser.getCurrentName();
			jacksonParser.nextToken();

			// Parse fields:
			switch (fieldName) {
			case "actors":
				// field Actors (mapped with "actors")
				if (jacksonParser.currentToken() != JsonToken.VALUE_NULL) {
					instance.setActors(jacksonParser.getText());
				}
				break;
			case "awards":
				// field Awards (mapped with "awards")
				if (jacksonParser.currentToken() != JsonToken.VALUE_NULL) {
					instance.setAwards(jacksonParser.getText());
				}
				break;
			case "boxOffice":
				// field BoxOffice (mapped with "boxOffice")
				if (jacksonParser.currentToken() != JsonToken.VALUE_NULL) {
					instance.setBoxOffice(jacksonParser.getText());
				}
				break;
			case "country":
				// field Country (mapped with "country")
				if (jacksonParser.currentToken() != JsonToken.VALUE_NULL) {
					instance.setCountry(jacksonParser.getText());
				}
				break;
			case "dVD":
				// field DVD (mapped with "dVD")
				if (jacksonParser.currentToken() != JsonToken.VALUE_NULL) {
					instance.setDVD(jacksonParser.getText());
				}
				break;
			case "director":
				// field Director (mapped with "director")
				if (jacksonParser.currentToken() != JsonToken.VALUE_NULL) {
					instance.setDirector(jacksonParser.getText());
				}
				break;
			case "genre":
				// field Genre (mapped with "genre")
				if (jacksonParser.currentToken() != JsonToken.VALUE_NULL) {
					instance.setGenre(jacksonParser.getText());
				}
				break;
			case "imdbID":
				// field imdbID (mapped with "imdbID")
				if (jacksonParser.currentToken() != JsonToken.VALUE_NULL) {
					instance.setImdbID(jacksonParser.getText());
				}
				break;
			case "imdbRating":
				// field imdbRating (mapped with "imdbRating")
				if (jacksonParser.currentToken() != JsonToken.VALUE_NULL) {
					instance.setImdbRating(jacksonParser.getText());
				}
				break;
			case "imdbVotes":
				// field imdbVotes (mapped with "imdbVotes")
				if (jacksonParser.currentToken() != JsonToken.VALUE_NULL) {
					instance.setImdbVotes(jacksonParser.getText());
				}
				break;
			case "language":
				// field Language (mapped with "language")
				if (jacksonParser.currentToken() != JsonToken.VALUE_NULL) {
					instance.setLanguage(jacksonParser.getText());
				}
				break;
			case "metascore":
				// field Metascore (mapped with "metascore")
				if (jacksonParser.currentToken() != JsonToken.VALUE_NULL) {
					instance.setMetascore(jacksonParser.getText());
				}
				break;
			case "plot":
				// field Plot (mapped with "plot")
				if (jacksonParser.currentToken() != JsonToken.VALUE_NULL) {
					instance.setPlot(jacksonParser.getText());
				}
				break;
			case "poster":
				// field Poster (mapped with "poster")
				if (jacksonParser.currentToken() != JsonToken.VALUE_NULL) {
					instance.setPoster(jacksonParser.getText());
				}
				break;
			case "production":
				// field Production (mapped with "production")
				if (jacksonParser.currentToken() != JsonToken.VALUE_NULL) {
					instance.setProduction(jacksonParser.getText());
				}
				break;
			case "rated":
				// field Rated (mapped with "rated")
				if (jacksonParser.currentToken() != JsonToken.VALUE_NULL) {
					instance.setRated(jacksonParser.getText());
				}
				break;
			case "ratings":
				// field Ratings (mapped with "ratings")
				if (jacksonParser.currentToken() == JsonToken.START_ARRAY) {
					ArrayList<Rating> collection = new ArrayList<>();
					Rating item = null;
					while (jacksonParser.nextToken() != JsonToken.END_ARRAY) {
						if (jacksonParser.currentToken() == JsonToken.VALUE_NULL) {
							item = null;
						} else {
							item = ratingBindMap.parseOnJackson(jacksonParser);
						}
						collection.add(item);
					}
					instance.setRatings(collection);
				}
				break;
			case "released":
				// field Released (mapped with "released")
				if (jacksonParser.currentToken() != JsonToken.VALUE_NULL) {
					instance.setReleased(jacksonParser.getText());
				}
				break;
			case "response":
				// field Response (mapped with "response")
				if (jacksonParser.currentToken() != JsonToken.VALUE_NULL) {
					instance.setResponse(jacksonParser.getText());
				}
				break;
			case "runtime":
				// field Runtime (mapped with "runtime")
				if (jacksonParser.currentToken() != JsonToken.VALUE_NULL) {
					instance.setRuntime(jacksonParser.getText());
				}
				break;
			case "title":
				// field Title (mapped with "title")
				if (jacksonParser.currentToken() != JsonToken.VALUE_NULL) {
					instance.setTitle(jacksonParser.getText());
				}
				break;
			case "type":
				// field Type (mapped with "type")
				if (jacksonParser.currentToken() != JsonToken.VALUE_NULL) {
					instance.setType(jacksonParser.getText());
				}
				break;
			case "website":
				// field Website (mapped with "website")
				if (jacksonParser.currentToken() != JsonToken.VALUE_NULL) {
					instance.setWebsite(jacksonParser.getText());
				}
				break;
			case "writer":
				// field Writer (mapped with "writer")
				if (jacksonParser.currentToken() != JsonToken.VALUE_NULL) {
					instance.setWriter(jacksonParser.getText());
				}
				break;
			case "year":
				// field Year (mapped with "year")
				if (jacksonParser.currentToken() != JsonToken.VALUE_NULL) {
					instance.setYear(jacksonParser.getText());
				}
				break;
			default:
				jacksonParser.skipChildren();
				break;
			}
		}
		return instance;
	}

	/**
	 * parse with jackson
	 */
	@Override
	public FilmDetail parseOnJacksonAsString(JsonParser jacksonParser) throws Exception {
		FilmDetail instance = new FilmDetail();
		String fieldName;
		if (jacksonParser.getCurrentToken() == null) {
			jacksonParser.nextToken();
		}
		if (jacksonParser.getCurrentToken() != JsonToken.START_OBJECT) {
			jacksonParser.skipChildren();
			return instance;
		}
		while (jacksonParser.nextToken() != JsonToken.END_OBJECT) {
			fieldName = jacksonParser.getCurrentName();
			jacksonParser.nextToken();

			// Parse fields:
			switch (fieldName) {
			case "actors":
				// field Actors (mapped with "actors")
				if (jacksonParser.currentToken() != JsonToken.VALUE_NULL) {
					instance.setActors(jacksonParser.getText());
				}
				break;
			case "awards":
				// field Awards (mapped with "awards")
				if (jacksonParser.currentToken() != JsonToken.VALUE_NULL) {
					instance.setAwards(jacksonParser.getText());
				}
				break;
			case "boxOffice":
				// field BoxOffice (mapped with "boxOffice")
				if (jacksonParser.currentToken() != JsonToken.VALUE_NULL) {
					instance.setBoxOffice(jacksonParser.getText());
				}
				break;
			case "country":
				// field Country (mapped with "country")
				if (jacksonParser.currentToken() != JsonToken.VALUE_NULL) {
					instance.setCountry(jacksonParser.getText());
				}
				break;
			case "dVD":
				// field DVD (mapped with "dVD")
				if (jacksonParser.currentToken() != JsonToken.VALUE_NULL) {
					instance.setDVD(jacksonParser.getText());
				}
				break;
			case "director":
				// field Director (mapped with "director")
				if (jacksonParser.currentToken() != JsonToken.VALUE_NULL) {
					instance.setDirector(jacksonParser.getText());
				}
				break;
			case "genre":
				// field Genre (mapped with "genre")
				if (jacksonParser.currentToken() != JsonToken.VALUE_NULL) {
					instance.setGenre(jacksonParser.getText());
				}
				break;
			case "imdbID":
				// field imdbID (mapped with "imdbID")
				if (jacksonParser.currentToken() != JsonToken.VALUE_NULL) {
					instance.setImdbID(jacksonParser.getText());
				}
				break;
			case "imdbRating":
				// field imdbRating (mapped with "imdbRating")
				if (jacksonParser.currentToken() != JsonToken.VALUE_NULL) {
					instance.setImdbRating(jacksonParser.getText());
				}
				break;
			case "imdbVotes":
				// field imdbVotes (mapped with "imdbVotes")
				if (jacksonParser.currentToken() != JsonToken.VALUE_NULL) {
					instance.setImdbVotes(jacksonParser.getText());
				}
				break;
			case "language":
				// field Language (mapped with "language")
				if (jacksonParser.currentToken() != JsonToken.VALUE_NULL) {
					instance.setLanguage(jacksonParser.getText());
				}
				break;
			case "metascore":
				// field Metascore (mapped with "metascore")
				if (jacksonParser.currentToken() != JsonToken.VALUE_NULL) {
					instance.setMetascore(jacksonParser.getText());
				}
				break;
			case "plot":
				// field Plot (mapped with "plot")
				if (jacksonParser.currentToken() != JsonToken.VALUE_NULL) {
					instance.setPlot(jacksonParser.getText());
				}
				break;
			case "poster":
				// field Poster (mapped with "poster")
				if (jacksonParser.currentToken() != JsonToken.VALUE_NULL) {
					instance.setPoster(jacksonParser.getText());
				}
				break;
			case "production":
				// field Production (mapped with "production")
				if (jacksonParser.currentToken() != JsonToken.VALUE_NULL) {
					instance.setProduction(jacksonParser.getText());
				}
				break;
			case "rated":
				// field Rated (mapped with "rated")
				if (jacksonParser.currentToken() != JsonToken.VALUE_NULL) {
					instance.setRated(jacksonParser.getText());
				}
				break;
			case "ratings":
				// field Ratings (mapped with "ratings")
				if (jacksonParser.currentToken() == JsonToken.START_ARRAY) {
					ArrayList<Rating> collection = new ArrayList<>();
					Rating item = null;
					String tempValue = null;
					while (jacksonParser.nextToken() != JsonToken.END_ARRAY) {
						tempValue = jacksonParser.getValueAsString();
						if (jacksonParser.currentToken() == JsonToken.VALUE_STRING && "null".equals(tempValue)) {
							item = null;
						} else {
							item = ratingBindMap.parseOnJacksonAsString(jacksonParser);
						}
						collection.add(item);
					}
					instance.setRatings(collection);
				} else if (jacksonParser.currentToken() == JsonToken.VALUE_STRING && !StringUtils.hasText(jacksonParser.getValueAsString())) {
					ArrayList<Rating> collection = new ArrayList<>();
					instance.setRatings(collection);
				}
				break;
			case "released":
				// field Released (mapped with "released")
				if (jacksonParser.currentToken() != JsonToken.VALUE_NULL) {
					instance.setReleased(jacksonParser.getText());
				}
				break;
			case "response":
				// field Response (mapped with "response")
				if (jacksonParser.currentToken() != JsonToken.VALUE_NULL) {
					instance.setResponse(jacksonParser.getText());
				}
				break;
			case "runtime":
				// field Runtime (mapped with "runtime")
				if (jacksonParser.currentToken() != JsonToken.VALUE_NULL) {
					instance.setRuntime(jacksonParser.getText());
				}
				break;
			case "title":
				// field Title (mapped with "title")
				if (jacksonParser.currentToken() != JsonToken.VALUE_NULL) {
					instance.setTitle(jacksonParser.getText());
				}
				break;
			case "type":
				// field Type (mapped with "type")
				if (jacksonParser.currentToken() != JsonToken.VALUE_NULL) {
					instance.setType(jacksonParser.getText());
				}
				break;
			case "website":
				// field Website (mapped with "website")
				if (jacksonParser.currentToken() != JsonToken.VALUE_NULL) {
					instance.setWebsite(jacksonParser.getText());
				}
				break;
			case "writer":
				// field Writer (mapped with "writer")
				if (jacksonParser.currentToken() != JsonToken.VALUE_NULL) {
					instance.setWriter(jacksonParser.getText());
				}
				break;
			case "year":
				// field Year (mapped with "year")
				if (jacksonParser.currentToken() != JsonToken.VALUE_NULL) {
					instance.setYear(jacksonParser.getText());
				}
				break;
			default:
				jacksonParser.skipChildren();
				break;
			}
		}
		return instance;
	}

	/**
	 * parse xml
	 */
	@Override
	public FilmDetail parseOnXml(XMLParser xmlParser, int currentEventType) throws Exception {
		FilmDetail instance = new FilmDetail();
		int eventType = currentEventType;
		boolean read = true;

		if (currentEventType == 0) {
			eventType = xmlParser.next();
		} else {
			eventType = xmlParser.getEventType();
		}
		String currentTag = xmlParser.getName().toString();
		String elementName = currentTag;
		// No attributes found

		// sub-elements
		while (xmlParser.hasNext() && elementName != null) {
			if (read) {
				eventType = xmlParser.next();
			} else {
				eventType = xmlParser.getEventType();
			}
			read = true;
			switch (eventType) {
			case XmlPullParser.START_TAG:
				currentTag = xmlParser.getName().toString();
				switch (currentTag) {
				case "actors":
					// property Actors (mapped on "actors")
					instance.setActors(StringEscapeUtils.unescapeXml(xmlParser.getElementText()));
					break;
				case "awards":
					// property Awards (mapped on "awards")
					instance.setAwards(StringEscapeUtils.unescapeXml(xmlParser.getElementText()));
					break;
				case "boxOffice":
					// property BoxOffice (mapped on "boxOffice")
					instance.setBoxOffice(StringEscapeUtils.unescapeXml(xmlParser.getElementText()));
					break;
				case "country":
					// property Country (mapped on "country")
					instance.setCountry(StringEscapeUtils.unescapeXml(xmlParser.getElementText()));
					break;
				case "dVD":
					// property DVD (mapped on "dVD")
					instance.setDVD(StringEscapeUtils.unescapeXml(xmlParser.getElementText()));
					break;
				case "director":
					// property Director (mapped on "director")
					instance.setDirector(StringEscapeUtils.unescapeXml(xmlParser.getElementText()));
					break;
				case "genre":
					// property Genre (mapped on "genre")
					instance.setGenre(StringEscapeUtils.unescapeXml(xmlParser.getElementText()));
					break;
				case "imdbID":
					// property imdbID (mapped on "imdbID")
					instance.setImdbID(StringEscapeUtils.unescapeXml(xmlParser.getElementText()));
					break;
				case "imdbRating":
					// property imdbRating (mapped on "imdbRating")
					instance.setImdbRating(StringEscapeUtils.unescapeXml(xmlParser.getElementText()));
					break;
				case "imdbVotes":
					// property imdbVotes (mapped on "imdbVotes")
					instance.setImdbVotes(StringEscapeUtils.unescapeXml(xmlParser.getElementText()));
					break;
				case "language":
					// property Language (mapped on "language")
					instance.setLanguage(StringEscapeUtils.unescapeXml(xmlParser.getElementText()));
					break;
				case "metascore":
					// property Metascore (mapped on "metascore")
					instance.setMetascore(StringEscapeUtils.unescapeXml(xmlParser.getElementText()));
					break;
				case "plot":
					// property Plot (mapped on "plot")
					instance.setPlot(StringEscapeUtils.unescapeXml(xmlParser.getElementText()));
					break;
				case "poster":
					// property Poster (mapped on "poster")
					instance.setPoster(StringEscapeUtils.unescapeXml(xmlParser.getElementText()));
					break;
				case "production":
					// property Production (mapped on "production")
					instance.setProduction(StringEscapeUtils.unescapeXml(xmlParser.getElementText()));
					break;
				case "rated":
					// property Rated (mapped on "rated")
					instance.setRated(StringEscapeUtils.unescapeXml(xmlParser.getElementText()));
					break;
				case "ratings":
				// property Ratings (mapped on "ratings")
				{
					ArrayList<Rating> collection = new ArrayList<>();
					Rating item;
					// add first element
					item = null;
					if (xmlParser.isEmptyElement()) {
						// if there's a an empty collection it marked with
						// attribute emptyCollection
						if (XmlAttributeUtils.getAttributeAsBoolean(xmlParser, "emptyCollection", false) == false) {
							collection.add(item);
						}
						xmlParser.nextTag();
					} else {
						item = ratingBindMap.parseOnXml(xmlParser, eventType);
						collection.add(item);
					}
					while (xmlParser.nextTag() != XmlPullParser.END_TAG && xmlParser.getName().toString().equals("ratings")) {
						if (xmlParser.isEmptyElement()) {
							item = null;
							xmlParser.nextTag();
						} else {
							item = ratingBindMap.parseOnXml(xmlParser, eventType);
						}
						collection.add(item);
					}
					instance.setRatings(collection);
					read = false;
				}
					break;
				case "released":
					// property Released (mapped on "released")
					instance.setReleased(StringEscapeUtils.unescapeXml(xmlParser.getElementText()));
					break;
				case "response":
					// property Response (mapped on "response")
					instance.setResponse(StringEscapeUtils.unescapeXml(xmlParser.getElementText()));
					break;
				case "runtime":
					// property Runtime (mapped on "runtime")
					instance.setRuntime(StringEscapeUtils.unescapeXml(xmlParser.getElementText()));
					break;
				case "title":
					// property Title (mapped on "title")
					instance.setTitle(StringEscapeUtils.unescapeXml(xmlParser.getElementText()));
					break;
				case "type":
					// property Type (mapped on "type")
					instance.setType(StringEscapeUtils.unescapeXml(xmlParser.getElementText()));
					break;
				case "website":
					// property Website (mapped on "website")
					instance.setWebsite(StringEscapeUtils.unescapeXml(xmlParser.getElementText()));
					break;
				case "writer":
					// property Writer (mapped on "writer")
					instance.setWriter(StringEscapeUtils.unescapeXml(xmlParser.getElementText()));
					break;
				case "year":
					// property Year (mapped on "year")
					instance.setYear(StringEscapeUtils.unescapeXml(xmlParser.getElementText()));
					break;
				default:
					break;
				}
				break;
			case XmlPullParser.END_TAG:
				if (elementName.equals(xmlParser.getName())) {
					currentTag = elementName;
					elementName = null;
				}
				break;
			case XmlPullParser.CDSECT:
			case XmlPullParser.TEXT:
				// no property is binded to VALUE o CDATA break;
			default:
				break;
			}
		}
		return instance;
	}
}
