package com.abubusoft.kripton.retrofit3.model;

import com.abubusoft.kripton.AbstractMapper;
import com.abubusoft.kripton.annotation.BindMap;
import com.abubusoft.kripton.escape.StringEscapeUtils;
import com.abubusoft.kripton.xml.XMLParser;
import com.abubusoft.kripton.xml.XMLSerializer;
import com.abubusoft.kripton.xml.XmlPullParser;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;

/**
 * This class is binder map for Film
 *
 * <p>
 * <strong>This class is generated by Kripton Annotation Processor - v.
 * 4.0.0-rc.19</strong>
 * </p>
 * <p>
 * <strong>Generation-time: Thu May 31 23:09:05 CEST 2018</strong>
 * </p>
 *
 * @see Film
 */
@BindMap(Film.class)
public class FilmBindMap extends AbstractMapper<Film> {
	@Override
	public int serializeOnJackson(Film object, JsonGenerator jacksonSerializer) throws Exception {
		jacksonSerializer.writeStartObject();
		int fieldCount = 0;

		// Serialized Field:

		// field Poster (mapped with "poster")
		if (object.getPoster() != null) {
			fieldCount++;
			jacksonSerializer.writeStringField("poster", object.getPoster());
		}

		// field Title (mapped with "title")
		if (object.getTitle() != null) {
			fieldCount++;
			jacksonSerializer.writeStringField("title", object.getTitle());
		}

		// field Type (mapped with "type")
		if (object.getType() != null) {
			fieldCount++;
			jacksonSerializer.writeStringField("type", object.getType());
		}

		// field Year (mapped with "year")
		if (object.getYear() != null) {
			fieldCount++;
			jacksonSerializer.writeStringField("year", object.getYear());
		}

		// field imdbID (mapped with "imdbID")
		if (object.getImdbID() != null) {
			fieldCount++;
			jacksonSerializer.writeStringField("imdbID", object.getImdbID());
		}

		jacksonSerializer.writeEndObject();
		return fieldCount;
	}

	@Override
	public int serializeOnJacksonAsString(Film object, JsonGenerator jacksonSerializer) throws Exception {
		jacksonSerializer.writeStartObject();
		int fieldCount = 0;

		// Serialized Field:

		// field Poster (mapped with "poster")
		if (object.getPoster() != null) {
			fieldCount++;
			jacksonSerializer.writeStringField("poster", object.getPoster());
		}

		// field Title (mapped with "title")
		if (object.getTitle() != null) {
			fieldCount++;
			jacksonSerializer.writeStringField("title", object.getTitle());
		}

		// field Type (mapped with "type")
		if (object.getType() != null) {
			fieldCount++;
			jacksonSerializer.writeStringField("type", object.getType());
		}

		// field Year (mapped with "year")
		if (object.getYear() != null) {
			fieldCount++;
			jacksonSerializer.writeStringField("year", object.getYear());
		}

		// field imdbID (mapped with "imdbID")
		if (object.getImdbID() != null) {
			fieldCount++;
			jacksonSerializer.writeStringField("imdbID", object.getImdbID());
		}

		jacksonSerializer.writeEndObject();
		return fieldCount;
	}

	/**
	 * method for xml serialization
	 */
	@Override
	public void serializeOnXml(Film object, XMLSerializer xmlSerializer, int currentEventType) throws Exception {
		if (currentEventType == 0) {
			xmlSerializer.writeStartElement("film");
		}

		// Persisted fields:

		// field imdbID (mapped with "imdbID")
		if (object.getImdbID() != null) {
			xmlSerializer.writeStartElement("imdbID");
			xmlSerializer.writeCharacters(StringEscapeUtils.escapeXml10(object.getImdbID()));
			xmlSerializer.writeEndElement();
		}

		// field Poster (mapped with "poster")
		if (object.getPoster() != null) {
			xmlSerializer.writeStartElement("poster");
			xmlSerializer.writeCharacters(StringEscapeUtils.escapeXml10(object.getPoster()));
			xmlSerializer.writeEndElement();
		}

		// field Title (mapped with "title")
		if (object.getTitle() != null) {
			xmlSerializer.writeStartElement("title");
			xmlSerializer.writeCharacters(StringEscapeUtils.escapeXml10(object.getTitle()));
			xmlSerializer.writeEndElement();
		}

		// field Type (mapped with "type")
		if (object.getType() != null) {
			xmlSerializer.writeStartElement("type");
			xmlSerializer.writeCharacters(StringEscapeUtils.escapeXml10(object.getType()));
			xmlSerializer.writeEndElement();
		}

		// field Year (mapped with "year")
		if (object.getYear() != null) {
			xmlSerializer.writeStartElement("year");
			xmlSerializer.writeCharacters(StringEscapeUtils.escapeXml10(object.getYear()));
			xmlSerializer.writeEndElement();
		}

		if (currentEventType == 0) {
			xmlSerializer.writeEndElement();
		}
	}

	/**
	 * parse with jackson
	 */
	@Override
	public Film parseOnJackson(JsonParser jacksonParser) throws Exception {
		Film instance = new Film();
		String fieldName;
		if (jacksonParser.currentToken() == null) {
			jacksonParser.nextToken();
		}
		if (jacksonParser.currentToken() != JsonToken.START_OBJECT) {
			jacksonParser.skipChildren();
			return instance;
		}
		while (jacksonParser.nextToken() != JsonToken.END_OBJECT) {
			fieldName = jacksonParser.getCurrentName();
			jacksonParser.nextToken();

			// Parse fields:
			switch (fieldName) {
			case "imdbID":
				// field imdbID (mapped with "imdbID")
				if (jacksonParser.currentToken() != JsonToken.VALUE_NULL) {
					instance.setImdbID(jacksonParser.getText());
				}
				break;
			case "poster":
				// field Poster (mapped with "poster")
				if (jacksonParser.currentToken() != JsonToken.VALUE_NULL) {
					instance.setPoster(jacksonParser.getText());
				}
				break;
			case "title":
				// field Title (mapped with "title")
				if (jacksonParser.currentToken() != JsonToken.VALUE_NULL) {
					instance.setTitle(jacksonParser.getText());
				}
				break;
			case "type":
				// field Type (mapped with "type")
				if (jacksonParser.currentToken() != JsonToken.VALUE_NULL) {
					instance.setType(jacksonParser.getText());
				}
				break;
			case "year":
				// field Year (mapped with "year")
				if (jacksonParser.currentToken() != JsonToken.VALUE_NULL) {
					instance.setYear(jacksonParser.getText());
				}
				break;
			default:
				jacksonParser.skipChildren();
				break;
			}
		}
		return instance;
	}

	/**
	 * parse with jackson
	 */
	@Override
	public Film parseOnJacksonAsString(JsonParser jacksonParser) throws Exception {
		Film instance = new Film();
		String fieldName;
		if (jacksonParser.getCurrentToken() == null) {
			jacksonParser.nextToken();
		}
		if (jacksonParser.getCurrentToken() != JsonToken.START_OBJECT) {
			jacksonParser.skipChildren();
			return instance;
		}
		while (jacksonParser.nextToken() != JsonToken.END_OBJECT) {
			fieldName = jacksonParser.getCurrentName();
			jacksonParser.nextToken();

			// Parse fields:
			switch (fieldName) {
			case "imdbID":
				// field imdbID (mapped with "imdbID")
				if (jacksonParser.currentToken() != JsonToken.VALUE_NULL) {
					instance.setImdbID(jacksonParser.getText());
				}
				break;
			case "poster":
				// field Poster (mapped with "poster")
				if (jacksonParser.currentToken() != JsonToken.VALUE_NULL) {
					instance.setPoster(jacksonParser.getText());
				}
				break;
			case "title":
				// field Title (mapped with "title")
				if (jacksonParser.currentToken() != JsonToken.VALUE_NULL) {
					instance.setTitle(jacksonParser.getText());
				}
				break;
			case "type":
				// field Type (mapped with "type")
				if (jacksonParser.currentToken() != JsonToken.VALUE_NULL) {
					instance.setType(jacksonParser.getText());
				}
				break;
			case "year":
				// field Year (mapped with "year")
				if (jacksonParser.currentToken() != JsonToken.VALUE_NULL) {
					instance.setYear(jacksonParser.getText());
				}
				break;
			default:
				jacksonParser.skipChildren();
				break;
			}
		}
		return instance;
	}

	/**
	 * parse xml
	 */
	@Override
	public Film parseOnXml(XMLParser xmlParser, int currentEventType) throws Exception {
		Film instance = new Film();
		int eventType = currentEventType;
		boolean read = true;

		if (currentEventType == 0) {
			eventType = xmlParser.next();
		} else {
			eventType = xmlParser.getEventType();
		}
		String currentTag = xmlParser.getName().toString();
		String elementName = currentTag;
		// No attributes found

		// sub-elements
		while (xmlParser.hasNext() && elementName != null) {
			if (read) {
				eventType = xmlParser.next();
			} else {
				eventType = xmlParser.getEventType();
			}
			read = true;
			switch (eventType) {
			case XmlPullParser.START_TAG:
				currentTag = xmlParser.getName().toString();
				switch (currentTag) {
				case "imdbID":
					// property imdbID (mapped on "imdbID")
					instance.setImdbID(StringEscapeUtils.unescapeXml(xmlParser.getElementText()));
					break;
				case "poster":
					// property Poster (mapped on "poster")
					instance.setPoster(StringEscapeUtils.unescapeXml(xmlParser.getElementText()));
					break;
				case "title":
					// property Title (mapped on "title")
					instance.setTitle(StringEscapeUtils.unescapeXml(xmlParser.getElementText()));
					break;
				case "type":
					// property Type (mapped on "type")
					instance.setType(StringEscapeUtils.unescapeXml(xmlParser.getElementText()));
					break;
				case "year":
					// property Year (mapped on "year")
					instance.setYear(StringEscapeUtils.unescapeXml(xmlParser.getElementText()));
					break;
				default:
					break;
				}
				break;
			case XmlPullParser.END_TAG:
				if (elementName.equals(xmlParser.getName())) {
					currentTag = elementName;
					elementName = null;
				}
				break;
			case XmlPullParser.CDSECT:
			case XmlPullParser.TEXT:
				// no property is binded to VALUE o CDATA break;
			default:
				break;
			}
		}
		return instance;
	}
}
