package com.abubusoft.kripton.retrofit3.model;

import com.abubusoft.kripton.AbstractMapper;
import com.abubusoft.kripton.annotation.BindMap;
import com.abubusoft.kripton.escape.StringEscapeUtils;
import com.abubusoft.kripton.xml.XMLParser;
import com.abubusoft.kripton.xml.XMLSerializer;
import com.abubusoft.kripton.xml.XmlPullParser;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;

/**
 * This class is binder map for Rating
 *
 * <p>
 * <strong>This class is generated by Kripton Annotation Processor - v.
 * 4.0.0-rc.19</strong>
 * </p>
 * <p>
 * <strong>Generation-time: Thu May 31 23:09:05 CEST 2018</strong>
 * </p>
 *
 * @see Rating
 */
@BindMap(Rating.class)
public class RatingBindMap extends AbstractMapper<Rating> {
	@Override
	public int serializeOnJackson(Rating object, JsonGenerator jacksonSerializer) throws Exception {
		jacksonSerializer.writeStartObject();
		int fieldCount = 0;

		// Serialized Field:

		// field Source (mapped with "source")
		if (object.getSource() != null) {
			fieldCount++;
			jacksonSerializer.writeStringField("source", object.getSource());
		}

		// field Value (mapped with "value")
		if (object.getValue() != null) {
			fieldCount++;
			jacksonSerializer.writeStringField("value", object.getValue());
		}

		jacksonSerializer.writeEndObject();
		return fieldCount;
	}

	@Override
	public int serializeOnJacksonAsString(Rating object, JsonGenerator jacksonSerializer) throws Exception {
		jacksonSerializer.writeStartObject();
		int fieldCount = 0;

		// Serialized Field:

		// field Source (mapped with "source")
		if (object.getSource() != null) {
			fieldCount++;
			jacksonSerializer.writeStringField("source", object.getSource());
		}

		// field Value (mapped with "value")
		if (object.getValue() != null) {
			fieldCount++;
			jacksonSerializer.writeStringField("value", object.getValue());
		}

		jacksonSerializer.writeEndObject();
		return fieldCount;
	}

	/**
	 * method for xml serialization
	 */
	@Override
	public void serializeOnXml(Rating object, XMLSerializer xmlSerializer, int currentEventType) throws Exception {
		if (currentEventType == 0) {
			xmlSerializer.writeStartElement("rating");
		}

		// Persisted fields:

		// field Source (mapped with "source")
		if (object.getSource() != null) {
			xmlSerializer.writeStartElement("source");
			xmlSerializer.writeCharacters(StringEscapeUtils.escapeXml10(object.getSource()));
			xmlSerializer.writeEndElement();
		}

		// field Value (mapped with "value")
		if (object.getValue() != null) {
			xmlSerializer.writeStartElement("value");
			xmlSerializer.writeCharacters(StringEscapeUtils.escapeXml10(object.getValue()));
			xmlSerializer.writeEndElement();
		}

		if (currentEventType == 0) {
			xmlSerializer.writeEndElement();
		}
	}

	/**
	 * parse with jackson
	 */
	@Override
	public Rating parseOnJackson(JsonParser jacksonParser) throws Exception {
		Rating instance = new Rating();
		String fieldName;
		if (jacksonParser.currentToken() == null) {
			jacksonParser.nextToken();
		}
		if (jacksonParser.currentToken() != JsonToken.START_OBJECT) {
			jacksonParser.skipChildren();
			return instance;
		}
		while (jacksonParser.nextToken() != JsonToken.END_OBJECT) {
			fieldName = jacksonParser.getCurrentName();
			jacksonParser.nextToken();

			// Parse fields:
			switch (fieldName) {
			case "source":
				// field Source (mapped with "source")
				if (jacksonParser.currentToken() != JsonToken.VALUE_NULL) {
					instance.setSource(jacksonParser.getText());
				}
				break;
			case "value":
				// field Value (mapped with "value")
				if (jacksonParser.currentToken() != JsonToken.VALUE_NULL) {
					instance.setValue(jacksonParser.getText());
				}
				break;
			default:
				jacksonParser.skipChildren();
				break;
			}
		}
		return instance;
	}

	/**
	 * parse with jackson
	 */
	@Override
	public Rating parseOnJacksonAsString(JsonParser jacksonParser) throws Exception {
		Rating instance = new Rating();
		String fieldName;
		if (jacksonParser.getCurrentToken() == null) {
			jacksonParser.nextToken();
		}
		if (jacksonParser.getCurrentToken() != JsonToken.START_OBJECT) {
			jacksonParser.skipChildren();
			return instance;
		}
		while (jacksonParser.nextToken() != JsonToken.END_OBJECT) {
			fieldName = jacksonParser.getCurrentName();
			jacksonParser.nextToken();

			// Parse fields:
			switch (fieldName) {
			case "source":
				// field Source (mapped with "source")
				if (jacksonParser.currentToken() != JsonToken.VALUE_NULL) {
					instance.setSource(jacksonParser.getText());
				}
				break;
			case "value":
				// field Value (mapped with "value")
				if (jacksonParser.currentToken() != JsonToken.VALUE_NULL) {
					instance.setValue(jacksonParser.getText());
				}
				break;
			default:
				jacksonParser.skipChildren();
				break;
			}
		}
		return instance;
	}

	/**
	 * parse xml
	 */
	@Override
	public Rating parseOnXml(XMLParser xmlParser, int currentEventType) throws Exception {
		Rating instance = new Rating();
		int eventType = currentEventType;
		boolean read = true;

		if (currentEventType == 0) {
			eventType = xmlParser.next();
		} else {
			eventType = xmlParser.getEventType();
		}
		String currentTag = xmlParser.getName().toString();
		String elementName = currentTag;
		// No attributes found

		// sub-elements
		while (xmlParser.hasNext() && elementName != null) {
			if (read) {
				eventType = xmlParser.next();
			} else {
				eventType = xmlParser.getEventType();
			}
			read = true;
			switch (eventType) {
			case XmlPullParser.START_TAG:
				currentTag = xmlParser.getName().toString();
				switch (currentTag) {
				case "source":
					// property Source (mapped on "source")
					instance.setSource(StringEscapeUtils.unescapeXml(xmlParser.getElementText()));
					break;
				case "value":
					// property Value (mapped on "value")
					instance.setValue(StringEscapeUtils.unescapeXml(xmlParser.getElementText()));
					break;
				default:
					break;
				}
				break;
			case XmlPullParser.END_TAG:
				if (elementName.equals(xmlParser.getName())) {
					currentTag = elementName;
					elementName = null;
				}
				break;
			case XmlPullParser.CDSECT:
			case XmlPullParser.TEXT:
				// no property is binded to VALUE o CDATA break;
			default:
				break;
			}
		}
		return instance;
	}
}
