/*******************************************************************************
 * Copyright 2018 Francesco Benincasa (info@abubusoft.com)
 * 
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License.  You may obtain a copy
 * of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the
 * License for the specific language governing permissions and limitations under
 * the License.
 ******************************************************************************/
package com.abubusoft.kripton.android.sqlite;

import com.abubusoft.kripton.android.SqlModificationType;

// TODO: Auto-generated Javadoc
/**
 * Rapresents operations generated by insert, update, delete operations on
 * tables.
 * 
 * In INSERT case, value is the id of the object.
 * 
 * In UPDATE, DELETE situation, it is the number of affected rows.
 * 
 * @author Francesco Benincasa (info@abubusoft.com)
 *
 */
public class SQLiteEvent {

	/**
	 * Instantiates a new SQ lite event.
	 *
	 * @param operationType the operation type
	 * @param value the value
	 */
	public SQLiteEvent(SqlModificationType operationType, long value) {
		this.operationType = operationType;
		this.value = value;
	}

	/** The operation type. */
	public final SqlModificationType operationType;
	
	/** The value. */
	public final long value;

	/**
	 * Creates the insert.
	 *
	 * @param result the result
	 * @return the SQ lite event
	 */
	public static SQLiteEvent createInsert(long result) {
		return new SQLiteEvent(SqlModificationType.INSERT, result);
	}

	/**
	 * Creates the update.
	 *
	 * @param result the result
	 * @return the SQ lite event
	 */
	public static SQLiteEvent createUpdate(long result) {
		return new SQLiteEvent(SqlModificationType.UPDATE, result);
	}

	/**
	 * Creates the delete.
	 *
	 * @param result the result
	 * @return the SQ lite event
	 */
	public static SQLiteEvent createDelete(long result) {
		return new SQLiteEvent(SqlModificationType.DELETE, result);
	}
}
